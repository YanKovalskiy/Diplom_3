{"name": "Проверка отображения заказов пользователя из раздела 'История заказов' на странице 'Лента заказов'", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (1586, 371). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\n  (Session info: chrome=126.0.6478.114)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7E9013E32+31618]\n\t(No symbol) [0x00007FF7E8F8B099]\n\t(No symbol) [0x00007FF7E8E4888A]\n\t(No symbol) [0x00007FF7E8EA022E]\n\t(No symbol) [0x00007FF7E8E9DBE2]\n\t(No symbol) [0x00007FF7E8E9B07B]\n\t(No symbol) [0x00007FF7E8E9A246]\n\t(No symbol) [0x00007FF7E8E8C281]\n\t(No symbol) [0x00007FF7E8EBD10A]\n\t(No symbol) [0x00007FF7E8E8BBA6]\n\t(No symbol) [0x00007FF7E8EBD320]\n\t(No symbol) [0x00007FF7E8EDCA80]\n\t(No symbol) [0x00007FF7E8EBCEB3]\n\t(No symbol) [0x00007FF7E8E8A46B]\n\t(No symbol) [0x00007FF7E8E8B001]\n\tGetHandleVerifier [0x00007FF7E9319FFD+3202381]\n\tGetHandleVerifier [0x00007FF7E9366A1D+3516269]\n\tGetHandleVerifier [0x00007FF7E935C490+3473888]\n\tGetHandleVerifier [0x00007FF7E90C5D36+760454]\n\t(No symbol) [0x00007FF7E8F96B3F]\n\t(No symbol) [0x00007FF7E8F91CD4]\n\t(No symbol) [0x00007FF7E8F91E62]\n\t(No symbol) [0x00007FF7E8F8120F]\n\tBaseThreadInitThunk [0x00007FFCE74353E0+16]\n\tRtlUserThreadStart [0x00007FFCE8E4485B+43]", "trace": "request = <SubRequest 'order' for <Function test_displaying_user_orders_from_order_history_section_on_order_feed_page[chrome]>>, user = {'email': 'yva2024dale07@example.com', 'password': 'C&(5FP6z1C'}, logged = None\nindex_page = <pages.index_page.IndexPage object at 0x000001D713A1F4D0>\n\n    @pytest.fixture()\n    def order(request, user, logged, index_page):\n        orders_count = request.node.get_closest_marker('orders_count').args[0]\n        for _ in range(orders_count):\n>           create_order(index_page)\n\nconftest.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nhelpers.py:5: in create_order\n    index_page.click_cross_button_in_popup_window()\npages\\index_page.py:24: in click_cross_button_in_popup_window\n    self.click_by_element(IndexPageLocators.BUTTON_CROSS_IN_POPUP_WINDOW)\npages\\base_page.py:28: in click_by_element\n    WDWait(self.web_drv, timeout).until(ec.element_to_be_clickable(locator)).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D713B4FB60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF7E8F8120F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCE74353E0+16]\\\\n\\\\tRtlUserThreadStart [0x00007FFCE8E4485B+43]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (1586, 371). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\nE         (Session info: chrome=126.0.6478.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7E9013E32+31618]\nE       \t(No symbol) [0x00007FF7E8F8B099]\nE       \t(No symbol) [0x00007FF7E8E4888A]\nE       \t(No symbol) [0x00007FF7E8EA022E]\nE       \t(No symbol) [0x00007FF7E8E9DBE2]\nE       \t(No symbol) [0x00007FF7E8E9B07B]\nE       \t(No symbol) [0x00007FF7E8E9A246]\nE       \t(No symbol) [0x00007FF7E8E8C281]\nE       \t(No symbol) [0x00007FF7E8EBD10A]\nE       \t(No symbol) [0x00007FF7E8E8BBA6]\nE       \t(No symbol) [0x00007FF7E8EBD320]\nE       \t(No symbol) [0x00007FF7E8EDCA80]\nE       \t(No symbol) [0x00007FF7E8EBCEB3]\nE       \t(No symbol) [0x00007FF7E8E8A46B]\nE       \t(No symbol) [0x00007FF7E8E8B001]\nE       \tGetHandleVerifier [0x00007FF7E9319FFD+3202381]\nE       \tGetHandleVerifier [0x00007FF7E9366A1D+3516269]\nE       \tGetHandleVerifier [0x00007FF7E935C490+3473888]\nE       \tGetHandleVerifier [0x00007FF7E90C5D36+760454]\nE       \t(No symbol) [0x00007FF7E8F96B3F]\nE       \t(No symbol) [0x00007FF7E8F91CD4]\nE       \t(No symbol) [0x00007FF7E8F91E62]\nE       \t(No symbol) [0x00007FF7E8F8120F]\nE       \tBaseThreadInitThunk [0x00007FFCE74353E0+16]\nE       \tRtlUserThreadStart [0x00007FFCE8E4485B+43]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "parameters": [{"name": "web_drv", "value": "'chrome'"}], "start": 1719209110028, "stop": 1719209110028, "uuid": "294f4707-11c8-4d2a-a992-04f782f7c1ae", "historyId": "bda9fc948d486407272a95672a6821f6", "testCaseId": "af6e0162a29f7e4a93553496b2e1567a", "fullName": "tests.test_section_order_feed.TestSectionOrderFeed#test_displaying_user_orders_from_order_history_section_on_order_feed_page", "labels": [{"name": "tag", "value": "orders_count(2)"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_section_order_feed"}, {"name": "subSuite", "value": "TestSectionOrderFeed"}, {"name": "host", "value": "ASUS-TUF"}, {"name": "thread", "value": "1592-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_section_order_feed"}]}